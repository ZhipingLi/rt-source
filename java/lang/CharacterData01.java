package java.lang;

class CharacterData01 extends CharacterData {
  static final CharacterData instance = new CharacterData01();
  
  static final char[] X = "\000\001\002\003\004\004\004\005\006\007\b\t\n\003\013\f\003\003\003\003\r`abcdefghijklmn\003o\003\003\003\003\003\003\003\003IpIIqrs\003tuBvw\003\003xywz\003\003\003\003\003I{I|qI}~IIIIII\003\003\003II\003II\003IIIq\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003".toCharArray();
  
  static final char[] Y = "\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\002\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\003\003\004\005\003\006\007\007\007\007\b\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\003\013\f\f\f\f\r\016\r\r\017\r\r\020\021\r\r\022\023\024\025\026\027\030\031\r\r\r\r\r\r\032\033\034\035\036\036\036\036\036\036\036\036\037\003\003\036\036\036\036\036\036\003\003\003\003\003\003\003\003\003\003\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f```abbcddddeefghhhbijklmdnopqrstuvvwxyzk{kkkk$\003\003\003\003\003\003NN\003\003\003\003\003\003\000\000\000\000\000\000\000\000\000\000\000\000\002\003\003\003\000\000\002\003\003\003\003\003[RRRRRRRRRRRRRRRRRRRRRR|\003\003\003\003\003\003\003><}~~~~~~\000\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\003\003\003\003\003\f\f\f\013\f\f\f\f\f\f\f\f\f\f\f\f\f^<\f<<< <<<\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f<<\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\003\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036<\003\003\003\003\003\003\003\003\003\003\003\003\003\036\036\036\036\036\036\036\036\036\036\036\003\003\003\003\n\n\n\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\036\036\036\036\036\036\003\003\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\003\003\003\003\003\003\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\003\003\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\036\003\003\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\003\003\003\003\003\f\f\f\f\f\f\f\f\f\f\f\f\f\f\003\003\003\003\003\003\f\f\f\f\f\f\f\f\f\f\f\f\003\003\003\f\003\003\003\003\003\003\003\003\003\003\003\003\003\003\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\003\036\036\036\036\003\003\003\003\003\003\003\003\003\003\036\036\036\036\036\036\036\036\003\003\003\003\003\003\003\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\003\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036\003\036\036\003\003\003\003\003\003\036\036\036\036\036\036\036\036\036\036\036\036\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\036\036\003\036\036\036\036\036\003\003\003\003\003\003\003\003\036\036\036\003\003\003\003\003\003\003\003\003\003\003\003\003".toCharArray();
  
  static final int[] A = new int[320];
  
  static final String A_DATA = "\000瀅\000瀅砀\000\000瀅\000瀅砀\000砀\000砀\000\000\030栀\030\000\030砀\000砀\000\000݋\000݋\000݋\000݋\000ѫ\000֋\000ࠋ\000ࠋ\000ࠋ砀\000\000\034\000\034\000\034栀砊栀砊栀矪栀瑊栀瞪栀琪栀砊栀益栀睊栀砊栀砊栀癪栀甪栀甊栀瓪栀瓪栀瓊栀璪栀璊栀瓊栀畊栀甪栀甊栀瓪栀瓊栀眪栀砊栀癊栀砊栀ࠋ栀ࠋ栀ࠋ栀ࠋ栀\034栀\034栀\034栀ۋ砀\000\000\034䀀〆\000Ы\000ҋ\000ԋ\000ࠋ\000瀅\000砊\000砊砀\000砀\000\000\030\000\030\000瘊\000瘊\000盪\000琊\000砊¢瀁¢瀁¡瀂¡瀂\000㐉\000㐉ࠀ瀅ࠀ瀅ࠀ瀅砀\000砀\000ࠀ瀅砀\000ࠀ\030ࠀԫࠀԫࠀԫࠀ׫ࠀ܋ࠀࠋࠀࠋࠀࠋࠀիࠀ٫ࠀދࠀࠋࠀԋࠀԋ砀\000栀\030ࠀ瀅䀀〆䀀〆䀀〆砀\000䀀〆䀀〆砀\000䀀〆䀀〆䀀〆砀\000砀\000䀀〆ࠀЫࠀЫࠀӋࠀ׫ࠀ\030ࠀ\030ࠀ\030砀\000ࠀ瀅ࠀҋࠀࠋࠀ\030栀\030栀\030ࠀ׋ࠀ۫　Ы　Ы　Ջ　٫　ࠋ　ࠋ　ࠋ砀\000\000〈䀀〆\000〈\000瀅䀀〆\000\030\000\030\000\030栀׫栀׫栀܋栀Ы\000㝉\000㝉\000〈\000〈䀀〆\000〈\000〈䀀〆\000\030\000တ\000㘉\000㘉䀀〆\000瀅\000瀅䀀〆䀀〆䀀〆\000㕉\000㕉\000瀅\000〈\000〈\000瀅\000瀅\000\030\000〈䀀〆\000瑊\000瑊\000睪\000睪\000睪\000皪\000皪\000皪\000皪\000疊\000疊\000疊\000瑪\000瑪\000瑪\000矪\000矪\000矊\000矊\000矊\000皪\000皊\000皊\000皊\000砊\000砊\000疪\000疪\000疪\000疊\000甪\000甊\000甊\000瓪\000瓊\000璪\000瓊\000瓊\000璪\000璊\000璊\000瑪\000瑪\000瑊\000琪\000琊\000眊\000眊\000眊\000癊\000癊\000癊\000癊\000瘪\000瘪\000瘊\000甪\000甪\000〈砀\000䀀〆\000瀄\000瀄\000瀄\000\034砀\000\000\034\000〈\000〈\000〈\000〈䠀တ䠀တ䠀တ䠀တ䀀〆䀀〆\000\034䀀〆栀\034栀\034砀\000\000Ы\000Ы\000Ջ\000٫\000瀁\000瀁\000瀂\000瀂\000瀂砀\000\000瀁砀\000砀\000\000瀁砀\000\000瀂\000瀁\000\031\000瀂\031\000瀁\000瀂᠀㙉᠀㙉᠀㔉᠀㔉᠀㟉᠀㟉᠀㚉᠀㚉᠀㕉᠀㕉က瀅က瀅砀\000က瀅က瀅砀\000栀\031栀\031砀\000栀\034᠀Ћ᠀߫᠀߫᠀߫᠀߫砀\000";
  
  static final chartoCharArray();
  
  int getProperties(int paramInt) {
    char c = (char)paramInt;
    return A[Y[X[c >> '\005'] << '\004' | c >> '\001' & 0xF] << '\001' | c & true];
  }
  
  int getPropertiesEx(int paramInt) {
    char c = (char)paramInt;
    return B[Y[X[c >> '\005'] << '\004' | c >> '\001' & 0xF] << '\001' | c & true];
  }
  
  int getType(int paramInt) {
    int i = getProperties(paramInt);
    return i & 0x1F;
  }
  
  boolean isOtherLowercase(int paramInt) {
    int i = getPropertiesEx(paramInt);
    return ((i & true) != 0);
  }
  
  boolean isOtherUppercase(int paramInt) {
    int i = getPropertiesEx(paramInt);
    return ((i & 0x2) != 0);
  }
  
  boolean isOtherAlphabetic(int paramInt) {
    int i = getPropertiesEx(paramInt);
    return ((i & 0x4) != 0);
  }
  
  boolean isIdeographic(int paramInt) {
    int i = getPropertiesEx(paramInt);
    return ((i & 0x10) != 0);
  }
  
  boolean isJavaIdentifierStart(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x7000) >= 20480);
  }
  
  boolean isJavaIdentifierPart(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x3000) != 0);
  }
  
  boolean isUnicodeIdentifierStart(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x7000) == 28672);
  }
  
  boolean isUnicodeIdentifierPart(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x1000) != 0);
  }
  
  boolean isIdentifierIgnorable(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x7000) == 4096);
  }
  
  int toLowerCase(int paramInt) {
    int i = paramInt;
    int j = getProperties(paramInt);
    if ((j & 0x20000) != 0) {
      int k = j << 5 >> 23;
      i = paramInt + k;
    } 
    return i;
  }
  
  int toUpperCase(int paramInt) {
    int i = paramInt;
    int j = getProperties(paramInt);
    if ((j & 0x10000) != 0) {
      int k = j << 5 >> 23;
      i = paramInt - k;
    } 
    return i;
  }
  
  int toTitleCase(int paramInt) {
    int i = paramInt;
    int j = getProperties(paramInt);
    if ((j & 0x8000) != 0) {
      if ((j & 0x10000) == 0) {
        i = paramInt + 1;
      } else if ((j & 0x20000) == 0) {
        i = paramInt - 1;
      } 
    } else if ((j & 0x10000) != 0) {
      i = toUpperCase(paramInt);
    } 
    return i;
  }
  
  int digit(int paramInt1, int paramInt2) {
    int i = -1;
    if (paramInt2 >= 2 && paramInt2 <= 36) {
      int j = getProperties(paramInt1);
      int k = j & 0x1F;
      if (k == 9) {
        i = paramInt1 + ((j & 0x3E0) >> 5) & 0x1F;
      } else if ((j & 0xC00) == 3072) {
        i = (paramInt1 + ((j & 0x3E0) >> 5) & 0x1F) + 10;
      } 
    } 
    return (i < paramInt2) ? i : -1;
  }
  
  int getNumericValue(int paramInt) {
    int i = getProperties(paramInt);
    null = -1;
    switch (i & 0xC00) {
      default:
        return -1;
      case 1024:
        return paramInt + ((i & 0x3E0) >> 5) & 0x1F;
      case 2048:
        switch (paramInt) {
          case 65811:
            return 40;
          case 65812:
            return 50;
          case 65813:
            return 60;
          case 65814:
            return 70;
          case 65815:
            return 80;
          case 65816:
            return 90;
          case 65817:
            return 100;
          case 65818:
            return 200;
          case 65819:
            return 300;
          case 65820:
            return 400;
          case 65821:
            return 500;
          case 65822:
            return 600;
          case 65823:
            return 700;
          case 65824:
            return 800;
          case 65825:
            return 900;
          case 65826:
            return 1000;
          case 65827:
            return 2000;
          case 65828:
            return 3000;
          case 65829:
            return 4000;
          case 65830:
            return 5000;
          case 65831:
            return 6000;
          case 65832:
            return 7000;
          case 65833:
            return 8000;
          case 65834:
            return 9000;
          case 65835:
            return 10000;
          case 65836:
            return 20000;
          case 65837:
            return 30000;
          case 65838:
            return 40000;
          case 65839:
            return 50000;
          case 65840:
            return 60000;
          case 65841:
            return 70000;
          case 65842:
            return 80000;
          case 65843:
            return 90000;
          case 66339:
            return 50;
          case 65860:
            return 50;
          case 65861:
            return 500;
          case 65862:
            return 5000;
          case 65863:
            return 50000;
          case 65866:
            return 50;
          case 65867:
            return 100;
          case 65868:
            return 500;
          case 65869:
            return 1000;
          case 65870:
            return 5000;
          case 65873:
            return 50;
          case 65874:
            return 100;
          case 65875:
            return 500;
          case 65876:
            return 1000;
          case 65877:
            return 10000;
          case 65878:
            return 50000;
          case 65894:
            return 50;
          case 65895:
            return 50;
          case 65896:
            return 50;
          case 65897:
            return 50;
          case 65898:
            return 100;
          case 65899:
            return 300;
          case 65900:
            return 500;
          case 65901:
            return 500;
          case 65902:
            return 500;
          case 65903:
            return 500;
          case 65904:
            return 500;
          case 65905:
            return 1000;
          case 65906:
            return 5000;
          case 65908:
            return 50;
          case 66369:
            return 90;
          case 66378:
            return 900;
          case 66517:
            return 100;
          case 67677:
            return 100;
          case 67678:
            return 1000;
          case 67679:
            return 10000;
          case 67865:
            return 100;
          case 68166:
            return 100;
          case 68167:
            return 1000;
          case 68222:
            return 50;
          case 68446:
            return 100;
          case 68447:
            return 1000;
          case 68478:
            return 100;
          case 68479:
            return 1000;
          case 69228:
            return 40;
          case 69229:
            return 50;
          case 69230:
            return 60;
          case 69231:
            return 70;
          case 69232:
            return 80;
          case 69233:
            return 90;
          case 69234:
            return 100;
          case 69235:
            return 200;
          case 69236:
            return 300;
          case 69237:
            return 400;
          case 69238:
            return 500;
          case 69239:
            return 600;
          case 69240:
            return 700;
          case 69241:
            return 800;
          case 69242:
            return 900;
          case 69726:
            return 40;
          case 69727:
            return 50;
          case 69728:
            return 60;
          case 69729:
            return 70;
          case 69730:
            return 80;
          case 69731:
            return 90;
          case 69732:
            return 100;
          case 69733:
            return 1000;
          case 74802:
            return 216000;
          case 74803:
            return 432000;
          case 119660:
            return 40;
          case 119661:
            return 50;
          case 119662:
            return 60;
          case 119663:
            return 70;
          case 119664:
            return 80;
          case 119665:
            return 90;
        } 
        return -2;
      case 3072:
        break;
    } 
    return (paramInt + ((i & 0x3E0) >> 5) & 0x1F) + 10;
  }
  
  boolean isWhitespace(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x7000) == 16384);
  }
  
  byte getDirectionality(int paramInt) {
    int i = getProperties(paramInt);
    byte b = (byte)((i & 0x78000000) >> 27);
    if (b == 15)
      b = -1; 
    return b;
  }
  
  boolean isMirrored(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x80000000) != 0);
  }
  
  static  {
    char[] arrayOfChar = "\000瀅\000瀅砀\000\000瀅\000瀅砀\000砀\000砀\000\000\030栀\030\000\030砀\000砀\000\000݋\000݋\000݋\000݋\000ѫ\000֋\000ࠋ\000ࠋ\000ࠋ砀\000\000\034\000\034\000\034栀砊栀砊栀矪栀瑊栀瞪栀琪栀砊栀益栀睊栀砊栀砊栀癪栀甪栀甊栀瓪栀瓪栀瓊栀璪栀璊栀瓊栀畊栀甪栀甊栀瓪栀瓊栀眪栀砊栀癊栀砊栀ࠋ栀ࠋ栀ࠋ栀ࠋ栀\034栀\034栀\034栀ۋ砀\000\000\034䀀〆\000Ы\000ҋ\000ԋ\000ࠋ\000瀅\000砊\000砊砀\000砀\000\000\030\000\030\000瘊\000瘊\000盪\000琊\000砊¢瀁¢瀁¡瀂¡瀂\000㐉\000㐉ࠀ瀅ࠀ瀅ࠀ瀅砀\000砀\000ࠀ瀅砀\000ࠀ\030ࠀԫࠀԫࠀԫࠀ׫ࠀ܋ࠀࠋࠀࠋࠀࠋࠀիࠀ٫ࠀދࠀࠋࠀԋࠀԋ砀\000栀\030ࠀ瀅䀀〆䀀〆䀀〆砀\000䀀〆䀀〆砀\000䀀〆䀀〆䀀〆砀\000砀\000䀀〆ࠀЫࠀЫࠀӋࠀ׫ࠀ\030ࠀ\030ࠀ\030砀\000ࠀ瀅ࠀҋࠀࠋࠀ\030栀\030栀\030ࠀ׋ࠀ۫　Ы　Ы　Ջ　٫　ࠋ　ࠋ　ࠋ砀\000\000〈䀀〆\000〈\000瀅䀀〆\000\030\000\030\000\030栀׫栀׫栀܋栀Ы\000㝉\000㝉\000〈\000〈䀀〆\000〈\000〈䀀〆\000\030\000တ\000㘉\000㘉䀀〆\000瀅\000瀅䀀〆䀀〆䀀〆\000㕉\000㕉\000瀅\000〈\000〈\000瀅\000瀅\000\030\000〈䀀〆\000瑊\000瑊\000睪\000睪\000睪\000皪\000皪\000皪\000皪\000疊\000疊\000疊\000瑪\000瑪\000瑪\000矪\000矪\000矊\000矊\000矊\000皪\000皊\000皊\000皊\000砊\000砊\000疪\000疪\000疪\000疊\000甪\000甊\000甊\000瓪\000瓊\000璪\000瓊\000瓊\000璪\000璊\000璊\000瑪\000瑪\000瑊\000琪\000琊\000眊\000眊\000眊\000癊\000癊\000癊\000癊\000瘪\000瘪\000瘊\000甪\000甪\000〈砀\000䀀〆\000瀄\000瀄\000瀄\000\034砀\000\000\034\000〈\000〈\000〈\000〈䠀တ䠀တ䠀တ䠀တ䀀〆䀀〆\000\034䀀〆栀\034栀\034砀\000\000Ы\000Ы\000Ջ\000٫\000瀁\000瀁\000瀂\000瀂\000瀂砀\000\000瀁砀\000砀\000\000瀁砀\000\000瀂\000瀁\000\031\000瀂\031\000瀁\000瀂᠀㙉᠀㙉᠀㔉᠀㔉᠀㟉᠀㟉᠀㚉᠀㚉᠀㕉᠀㕉က瀅က瀅砀\000က瀅က瀅砀\000栀\031栀\031砀\000栀\034᠀Ћ᠀߫᠀߫᠀߫᠀߫砀\000".toCharArray();
    assert arrayOfChar.length == 640;
    byte b1 = 0;
    byte b2 = 0;
    while (b1 < 'ʀ') {
      char c = arrayOfChar[b1++] << '\020';
      A[b2++] = c | arrayOfChar[b1++];
    } 
  }
}


/* Location:              D:\software\jd-gui\jd-gui-windows-1.6.3\rt.jar!\java\lang\CharacterData01.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.0.7
 */